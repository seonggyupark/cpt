package cybion.company_annotator;

import cybion.annotator_utils.AnnotatorUtils;
import cybion.annotator_utils.annotator.EntityAnnotator;
import cybion.annotator_utils.jcas.cas.Entity;
import cybion.uima.ts.BandoEntity;
import cybion.uima.ts.CompanyAnnotation;
import org.apache.uima.UimaContext;
import org.apache.uima.analysis_engine.AnalysisEngineProcessException;
import org.apache.uima.annotator.dict_annot.dictionary.Dictionary;
import org.apache.uima.annotator.dict_annot.dictionary.DictionaryFileParser;
import org.apache.uima.annotator.dict_annot.dictionary.impl.DictionaryFileParserImpl;
import org.apache.uima.annotator.dict_annot.dictionary.impl.HashMapDictionaryBuilder;
import org.apache.uima.cas.text.AnnotationIndex;
import org.apache.uima.jcas.JCas;
import org.apache.uima.jcas.cas.NonEmptyStringList;
import org.apache.uima.jcas.tcas.Annotation;
import org.apache.uima.resource.ResourceInitializationException;
import org.apache.uima.util.Level;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.xml.sax.SAXException;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.*;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.util.Collection;
import java.util.HashSet;

public class CompanyAnnotator extends EntityAnnotator {



  // file (needed for external
  // callings)

  private Collection<String> unknownCompanies = new HashSet<String>(); // companies not known by the

  // dictionary

  @Override
  public void initialize(UimaContext context) throws ResourceInitializationException {
    super.initialize(context);
  }

  /**
   * get OpenCalais annotations, AlchemyAPI annotations, CompanyDictionary annotations, compare them
   * and consequently update the dictionary (try to recognize new Companies)
   */
  @Override
  public void process(JCas aJCas) throws AnalysisEngineProcessException {

    // take the company annotations generated by the CompanyDictionary
    AnnotationIndex<Annotation> dictCompanyAnnotationIndex = aJCas
            .getAnnotationIndex(CompanyAnnotation.type);

    // get company annotations generated by OpenCalais

    // for every annotation not in the dictionary identified by OpenCalais, put it into the
    // dictionary
    addCompanies(aJCas, dictCompanyAnnotationIndex, org.apache.uima.calais.Company.type);
    addCompanies(aJCas, dictCompanyAnnotationIndex, org.apache.uima.calais.Organization.type);

    // get company annotations generated by AlchemyAPI
    // AnnotationIndex<Annotation> alchemyAPIAnnotationIndex =
    // aJCas.getAnnotationIndex(org.apache.uima.alchemy.ts.entity.Organization.type);

    // updates the dictionary
    try {
      this.updateDictionary();
    } catch (Exception e) {
      throw new AnalysisEngineProcessException(e);
    }

    setCompaniesInsideBandoEntity(aJCas);

  }

  private void addCompanies(JCas aJCas, AnnotationIndex<Annotation> dictCompanyAnnotationIndex,
          int type) {
    AnnotationIndex<Annotation> openCalaisCompanyAnnotationIndex = aJCas.getAnnotationIndex(type);
    for (Annotation companyAnnotation : openCalaisCompanyAnnotationIndex) {
      try {
        this.addEntityReference(aJCas, companyAnnotation);
        if (!dictCompanyAnnotationIndex.contains(companyAnnotation)) {
          this.unknownCompanies.add(companyAnnotation.getCoveredText());
        }
      } catch (Exception e) {
        this.getContext().getLogger().log(Level.WARNING, e.toString());
      }
    }
  }

  private void setCompaniesInsideBandoEntity(JCas cas) {
    this.getContext().getLogger().log(
            Level.INFO,
            new StringBuilder("setting ").append(this.getEntities().size()).append(" companies")
                    .toString());
    BandoEntity bando = AnnotatorUtils.getBandoEntityWithCreation(cas);
    for (Entity entity : this.getEntities()) {
      NonEmptyStringList companies = new NonEmptyStringList(cas);
      companies.setHead(entity.getText());
      companies.setTail(bando.getCompanies());
      bando.setCompanies(companies);
    }
  }

  public Collection<String> getUnknownCompanies() {
    return unknownCompanies;
  }

  private void updateDictionary() throws ResourceInitializationException,
          ParserConfigurationException, SAXException, IOException,
          TransformerFactoryConfigurationError, TransformerException {

    DictionaryFileParser fileParser = new DictionaryFileParserImpl();

    // creates the dictionary based on the existing dictionary
    String dictParameterValue = String.valueOf("/"+this.getContext().getConfigParameterValue("companyDictionary"));
    URL resource = this.getClass().getResource(dictParameterValue);
    String dictionaryPath = resource.toString();
    InputStream stream = this.getClass().getResourceAsStream(dictParameterValue);
    Dictionary dict = fileParser.parseDictionaryFile(dictionaryPath, stream,
            new HashMapDictionaryBuilder());

    // iterate the list of unknown companies
    for (String company : this.getUnknownCompanies()) {
      // if the company is not contained then add it to the dict
      if (!dict.contains(company) && !dict.contains(company.split(" "))) {
        File f = new File(resource.getFile());
        if (f.exists() && f.canWrite()) {
          this.getContext().getLogger().log(Level.INFO,
                  ("Adding to the dictionary the unknown company: " + company));
          DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
          DocumentBuilder builder = factory.newDocumentBuilder();
          Document doc = builder.parse(f);

          // create new entry for the unknown dictionary
          Element entry = doc.createElement("entry");
          Element key = doc.createElement("key");
          entry.appendChild(key);
          key.setTextContent(company);
          doc.getElementsByTagName("entries").item(0).appendChild(entry);

          Transformer transformer = TransformerFactory.newInstance().newTransformer();
          transformer.setOutputProperty(OutputKeys.INDENT, "yes");
          transformer.setOutputProperty(OutputKeys.METHOD, "xml");
          Source source = new DOMSource(doc);
          Result result = new StreamResult(new FileOutputStream(f));
          transformer.transform(source, result);
        }

      }
    }

    // flush the unknown companies collection
    this.getUnknownCompanies().clear();

  }
}
